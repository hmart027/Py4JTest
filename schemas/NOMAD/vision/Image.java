// automatically generated by the FlatBuffers compiler, do not modify

package NOMAD.vision;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Image extends Table {
  public static Image getRootAsImage(ByteBuffer _bb) { return getRootAsImage(_bb, new Image()); }
  public static Image getRootAsImage(ByteBuffer _bb, Image obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Image __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int data(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int dataLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer dataAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer dataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long width() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long height() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createImage(FlatBufferBuilder builder,
      int dataOffset,
      long width,
      long height) {
    builder.startObject(3);
    Image.addHeight(builder, height);
    Image.addWidth(builder, width);
    Image.addData(builder, dataOffset);
    return Image.endImage(builder);
  }

  public static void startImage(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(0, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addWidth(FlatBufferBuilder builder, long width) { builder.addInt(1, (int)width, (int)0L); }
  public static void addHeight(FlatBufferBuilder builder, long height) { builder.addInt(2, (int)height, (int)0L); }
  public static int endImage(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishImageBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedImageBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

